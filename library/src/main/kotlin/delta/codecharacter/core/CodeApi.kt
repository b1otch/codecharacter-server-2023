/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package delta.codecharacter.core

import delta.codecharacter.dtos.CodeDto
import delta.codecharacter.dtos.CodeRevisionDto
import delta.codecharacter.dtos.CreateCodeRevisionRequestDto
import delta.codecharacter.dtos.GenericErrorDto
import delta.codecharacter.dtos.UpdateLatestCodeRequestDto
import io.swagger.annotations.Api
import io.swagger.annotations.ApiOperation
import io.swagger.annotations.ApiParam
import io.swagger.annotations.ApiResponse
import io.swagger.annotations.ApiResponses
import io.swagger.annotations.Authorization
import org.springframework.http.HttpStatus
import org.springframework.http.ResponseEntity
import org.springframework.validation.annotation.Validated
import org.springframework.web.bind.annotation.RequestBody
import org.springframework.web.bind.annotation.RequestMapping
import org.springframework.web.bind.annotation.RequestMethod
import javax.validation.Valid

@Validated
@Api(value = "Code", description = "The Code API")
@RequestMapping("\${api.base-path:}")
interface CodeApi {

    @ApiOperation(
        value = "Create code revision",
        nickname = "createCodeRevision",
        notes = "Create code revision",
        authorizations = [Authorization(value = "http-bearer")]
    )
    @ApiResponses(
        value = [ApiResponse(code = 204, message = "No Content"), ApiResponse(
            code = 400,
            message = "Bad Request",
            response = GenericErrorDto::class
        ), ApiResponse(code = 401, message = "Unauthorized")]
    )
    @RequestMapping(
        method = [RequestMethod.POST],
        value = ["/user/code/revisions"],
        produces = ["application/json"],
        consumes = ["application/json"]
    )
    fun createCodeRevision(
        @ApiParam(
            value = "",
            required = true
        ) @Valid @RequestBody createCodeRevisionRequestDto: CreateCodeRevisionRequestDto
    ): ResponseEntity<Unit> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @ApiOperation(
        value = "Get code revisions",
        nickname = "getCodeRevisions",
        notes = "Get list of all code revision IDs",
        response = CodeRevisionDto::class,
        responseContainer = "List",
        authorizations = [Authorization(value = "http-bearer")]
    )
    @ApiResponses(
        value = [ApiResponse(
            code = 200,
            message = "OK",
            response = CodeRevisionDto::class,
            responseContainer = "List"
        ), ApiResponse(code = 401, message = "Unauthorized")]
    )
    @RequestMapping(
        method = [RequestMethod.GET],
        value = ["/user/code/revisions"],
        produces = ["application/json"]
    )
    fun getCodeRevisions(): ResponseEntity<List<CodeRevisionDto>> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @ApiOperation(
        value = "Get latest code",
        nickname = "getLatestCode",
        notes = "Get latest code",
        response = CodeDto::class,
        authorizations = [Authorization(value = "http-bearer")]
    )
    @ApiResponses(
        value = [ApiResponse(
            code = 200,
            message = "OK",
            response = CodeDto::class
        ), ApiResponse(code = 401, message = "Unauthorized")]
    )
    @RequestMapping(
        method = [RequestMethod.GET],
        value = ["/user/code/latest"],
        produces = ["application/json"]
    )
    fun getLatestCode(): ResponseEntity<CodeDto> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @ApiOperation(
        value = "Update latest code",
        nickname = "updateLatestCode",
        notes = "Update latest code",
        authorizations = [Authorization(value = "http-bearer")]
    )
    @ApiResponses(
        value = [ApiResponse(code = 204, message = "No Content"), ApiResponse(
            code = 400,
            message = "Bad Request",
            response = GenericErrorDto::class
        ), ApiResponse(code = 401, message = "Unauthorized")]
    )
    @RequestMapping(
        method = [RequestMethod.POST],
        value = ["/user/code/latest"],
        produces = ["application/json"],
        consumes = ["application/json"]
    )
    fun updateLatestCode(
        @ApiParam(
            value = "",
            required = true
        ) @Valid @RequestBody updateLatestCodeRequestDto: UpdateLatestCodeRequestDto
    ): ResponseEntity<Unit> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }
}
