/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package delta.codecharacter.core

import delta.codecharacter.dtos.GenericErrorDto
import delta.codecharacter.dtos.NotificationDto
import io.swagger.annotations.Api
import io.swagger.annotations.ApiOperation
import io.swagger.annotations.ApiParam
import io.swagger.annotations.ApiResponse
import io.swagger.annotations.ApiResponses
import io.swagger.annotations.Authorization
import org.springframework.http.HttpStatus
import org.springframework.http.ResponseEntity
import org.springframework.validation.annotation.Validated
import org.springframework.web.bind.annotation.PathVariable
import org.springframework.web.bind.annotation.RequestBody
import org.springframework.web.bind.annotation.RequestMapping
import org.springframework.web.bind.annotation.RequestMethod
import javax.validation.Valid

@Validated
@Api(value = "Notification", description = "The Notification API")
@RequestMapping("\${api.base-path:}")
interface NotificationApi {

    @ApiOperation(
        value = "Get all notifications",
        nickname = "getAllNotifications",
        notes = "Get all notifications",
        response = NotificationDto::class,
        responseContainer = "List",
        authorizations = [Authorization(value = "http-bearer")]
    )
    @ApiResponses(
        value = [ApiResponse(
            code = 200,
            message = "OK",
            response = NotificationDto::class,
            responseContainer = "List"
        )]
    )
    @RequestMapping(
        method = [RequestMethod.GET],
        value = ["/user/notifications"],
        produces = ["application/json"]
    )
    fun getAllNotifications(): ResponseEntity<List<NotificationDto>> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @ApiOperation(
        value = "Save notification read status",
        nickname = "saveNotificationReadStatus",
        notes = "Save notification read status",
        authorizations = [Authorization(value = "http-bearer")]
    )
    @ApiResponses(
        value = [ApiResponse(code = 204, message = "No Content"), ApiResponse(
            code = 400,
            message = "Bad Request",
            response = GenericErrorDto::class
        ), ApiResponse(code = 401, message = "Unauthorized")]
    )
    @RequestMapping(
        method = [RequestMethod.PUT],
        value = ["/user/notifications/{notificationId}/read"],
        produces = ["application/json"],
        consumes = ["application/json"]
    )
    fun saveNotificationReadStatus(
        @ApiParam(
            value = "ID of the notification",
            required = true
        ) @PathVariable("notificationId") notificationId: java.util.UUID,
        @ApiParam(
            value = "",
            required = true
        ) @Valid @RequestBody body: Boolean
    ): ResponseEntity<Unit> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }
}
